"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[6947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),g=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=g(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=g(n),d=o,m=u["".concat(s,".").concat(d)]||u[d]||p[d]||l;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var g=2;g<l;g++)a[g]=n[g];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>g});var r=n(7462),o=(n(7294),n(3905));const l={},a="Logging",i={unversionedId:"schulcloud-server/Coding-Guidelines/logging",id:"schulcloud-server/Coding-Guidelines/logging",title:"Logging",description:"For logging use the Logger, exported by the logger module. It encapsulates a Winston logger. Its injection scope is transient, so you can set a context when you inject it.",source:"@site/docs/schulcloud-server/Coding-Guidelines/logging.md",sourceDirName:"schulcloud-server/Coding-Guidelines",slug:"/schulcloud-server/Coding-Guidelines/logging",permalink:"/docs/schulcloud-server/Coding-Guidelines/logging",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/schulcloud-server/Coding-Guidelines/logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Exception Handling",permalink:"/docs/schulcloud-server/Coding-Guidelines/exception-handling"},next:{title:"Testing",permalink:"/docs/schulcloud-server/Coding-Guidelines/testing"}},s={},g=[{value:"Log levels and error logging",id:"log-levels-and-error-logging",level:2},{value:"Legacy logger",id:"legacy-logger",level:2}],c={toc:g},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logging"},"Logging"),(0,o.kt)("p",null,"For logging use the Logger, exported by the logger module. It encapsulates a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston"},"Winston")," logger. Its ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/fundamentals/injection-scopes"},"injection scope")," is transient, so you can set a context when you inject it."),(0,o.kt)("p",null,"For better privacy protection and searchability of logs, the logger cannot log arbitrary strings but only so called ",(0,o.kt)("strong",{parentName:"p"},"loggables"),". If you want to log something you have to use or create a loggable that implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable")," interface."),(0,o.kt)("p",null,"The message should be fixed in each loggable. If you want to log further data, put in the data field of the ",(0,o.kt)("inlineCode",{parentName:"p"},"LogMessage"),", like in the example below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"},"export class YourLoggable implements Loggable {\n    constructor(private readonly userId: EntityId) {}\n\n    getLogMessage(): LogMessage {\n        return {\n            message: 'I am a log message.',\n            data: { userId: this.userId, },\n        };\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"},"import { Logger } from '@src/core/logger';\n\nexport class YourUc {\n    constructor(private logger: Logger) {\n        this.logger.setContext(YourUc.name);\n    }\n\n    public sampleUcMethod(user) {\n        this.logger.log(new YourLoggable(userId: user.id));\n    }\n}\n")),(0,o.kt)("p",null,"This produces a logging output like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"[NestWinston] Info - 2023-05-31 15:20:30.888   [YourUc] {  message: 'I am a log message.',  data: {   userId: '0000d231816abba584714c9e'  }}\n")),(0,o.kt)("h2",{id:"log-levels-and-error-logging"},"Log levels and error logging"),(0,o.kt)("p",null,"The logger exposes the methods ",(0,o.kt)("inlineCode",{parentName:"p"},"log"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"warn"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"verbose"),". It does not expose an ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," method because we don't want errors to be logged manually. All errors are logged in the exception filter."),(0,o.kt)("h2",{id:"legacy-logger"},"Legacy logger"),(0,o.kt)("p",null,"While transitioning to the new logger for loggables, the old logger for strings is still available as ",(0,o.kt)("inlineCode",{parentName:"p"},"LegacyLogger"),"."))}p.isMDXComponent=!0}}]);