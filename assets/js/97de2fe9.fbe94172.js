"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[338],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>k});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},s=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,l=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),c=u(n),m=i,k=c["".concat(p,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(k,r(r({ref:e},s),{},{components:n})):a.createElement(k,r({ref:e},s))}));function k(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[c]="string"==typeof t?t:i,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},577:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const l={sidebar_position:3},r="Project Structure",o={unversionedId:"nuxt-client/ProjectStructure",id:"nuxt-client/ProjectStructure",title:"Project Structure",description:"Description of the Structure",source:"@site/docs/nuxt-client/2_ProjectStructure.md",sourceDirName:"nuxt-client",slug:"/nuxt-client/ProjectStructure",permalink:"/docs/nuxt-client/ProjectStructure",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/nuxt-client/2_ProjectStructure.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Code Conventions",permalink:"/docs/nuxt-client/CodeConventions"},next:{title:"Git Conventions",permalink:"/docs/nuxt-client/GitConventions"}},p={},u=[{value:"Description of the Structure",id:"description-of-the-structure",level:2},{value:"What is a building-block?",id:"what-is-a-building-block",level:2},{value:"Types of building-blocks",id:"types-of-building-blocks",level:2},{value:"Type: Page",id:"type-page",level:2},{value:"What is it?",id:"what-is-it",level:3},{value:"Naming Convention",id:"naming-convention",level:3},{value:"Can import types",id:"can-import-types",level:3},{value:"Type: Feature",id:"type-feature",level:2},{value:"What is it?",id:"what-is-it-1",level:3},{value:"Naming Convention",id:"naming-convention-1",level:3},{value:"Can import types",id:"can-import-types-1",level:3},{value:"Type: UI",id:"type-ui",level:2},{value:"What is it?",id:"what-is-it-2",level:3},{value:"Naming Convention",id:"naming-convention-2",level:3},{value:"Can import types",id:"can-import-types-2",level:3},{value:"Type: Data",id:"type-data",level:2},{value:"What is it?",id:"what-is-it-3",level:3},{value:"Naming Convention",id:"naming-convention-3",level:3},{value:"Can import types",id:"can-import-types-3",level:3},{value:"Type: Util",id:"type-util",level:2},{value:"What is it?",id:"what-is-it-4",level:3},{value:"Naming Convention",id:"naming-convention-4",level:3},{value:"Can import types",id:"can-import-types-4",level:3}],s={toc:u},c="wrapper";function d(t){let{components:e,...n}=t;return(0,i.kt)(c,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"project-structure"},"Project Structure"),(0,i.kt)("h2",{id:"description-of-the-structure"},"Description of the Structure"),(0,i.kt)("p",null,"The projects code is separated into building blocks."),(0,i.kt)("h2",{id:"what-is-a-building-block"},"What is a building-block?"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"building-block"),' is a "container" were we place most of our applications logic and components. Each building-block is defined by an ',(0,i.kt)("inlineCode",{parentName:"p"},"index.ts (Barrel-File)")," describing it's exported content (public API of a building-block) and a ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,i.kt)("p",null,"Utilizing linting rules and the index.ts we can ensure that each building-block only exposes files which are meant to be used application-wide. This way we achieve a strong separation of concern across the whole application."),(0,i.kt)("p",null,"Our linting rule is based on the following concept:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nx.dev/core-features/enforce-project-boundaries"},"Enforce Project Boundaries | Nx")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Note: in above documentation **libraries** are equivalent to building-blocks and **tags** represent the types defined below.")),(0,i.kt)("h2",{id:"types-of-building-blocks"},"Types of building-blocks"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Page")),(0,i.kt)("p",null,"Contains a subpage of the application. Orchestrates Feature and UI building-blocks."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Example: page-dashboard")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Feature")),(0,i.kt)("p",null,"Complex features with ",(0,i.kt)("strong",{parentName:"p"},"stateful / smart components"),". Usually specialized to fulfill specific roles in the App. Can also contain presentational components that are specialized for this feature."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Example: feature-calendar")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"UI")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Stateless / presentational components")," which get their data via props and emit events. Usually less specialized."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Example: ui-forms")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Data")),(0,i.kt)("p",null,"State and API-access. Does not contain any visual components. They are the data-sources of all smart components."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Example: data-auth")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Util")),(0,i.kt)("p",null,"Contains shared low-level code."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Example: util-form-validators")),(0,i.kt)("h2",{id:"type-page"},"Type: Page"),(0,i.kt)("h3",{id:"what-is-it"},"What is it?"),(0,i.kt)("p",null,"A page building-block represents a ",(0,i.kt)("strong",{parentName:"p"},"subpage")," of the application. It contains the layout component and orchestrates feature and ui building blocks to create a subpage. It can not be imported into any other type of building-block. It is ",(0,i.kt)("strong",{parentName:"p"},"only imported by the vue-router")," and should be ",(0,i.kt)("strong",{parentName:"p"},"lazy-loaded")," if possible."),(0,i.kt)("h3",{id:"naming-convention"},"Naming Convention"),(0,i.kt)("p",null,"Placed in folder ",(0,i.kt)("strong",{parentName:"p"},"page")),(0,i.kt)("h3",{id:"can-import-types"},"Can import types"),(0,i.kt)("p",null,"data, util, ui, feature"),(0,i.kt)("h2",{id:"type-feature"},"Type: Feature"),(0,i.kt)("h3",{id:"what-is-it-1"},"What is it?"),(0,i.kt)("p",null,"A feature building-block contains a set of files that represent a business use case in an application."),(0,i.kt)("p",null,"Most of the components of features are ",(0,i.kt)("strong",{parentName:"p"},"stateful / smart components")," that interact with data sources. This type also contains most of the UI logic, form validation code, etc."),(0,i.kt)("h3",{id:"naming-convention-1"},"Naming Convention"),(0,i.kt)("p",null,"Placed in folder ",(0,i.kt)("strong",{parentName:"p"},"feature")),(0,i.kt)("h3",{id:"can-import-types-1"},"Can import types"),(0,i.kt)("p",null,"data, util, ui, feature"),(0,i.kt)("h2",{id:"type-ui"},"Type: UI"),(0,i.kt)("h3",{id:"what-is-it-2"},"What is it?"),(0,i.kt)("p",null,"A ui building-block mainly contains ",(0,i.kt)("strong",{parentName:"p"},"Stateless / presentational components")," which are used all across the application. They don't have access to stores and do not use features in their templates. All data needed for components in ui building-blocks comes from props."),(0,i.kt)("h3",{id:"naming-convention-2"},"Naming Convention"),(0,i.kt)("p",null,"Placed in folder ",(0,i.kt)("strong",{parentName:"p"},"ui")),(0,i.kt)("h3",{id:"can-import-types-2"},"Can import types"),(0,i.kt)("p",null,"util, other ui"),(0,i.kt)("h2",{id:"type-data"},"Type: Data"),(0,i.kt)("h3",{id:"what-is-it-3"},"What is it?"),(0,i.kt)("p",null,"A data building-block contains ",(0,i.kt)("strong",{parentName:"p"},"stores and api-services"),". It does not contain any view components. They serve as data-sources for feature and page building blocks."),(0,i.kt)("h3",{id:"naming-convention-3"},"Naming Convention"),(0,i.kt)("p",null,"Placed in folder ",(0,i.kt)("strong",{parentName:"p"},"data")),(0,i.kt)("h3",{id:"can-import-types-3"},"Can import types"),(0,i.kt)("p",null,"util, other data"),(0,i.kt)("h2",{id:"type-util"},"Type: Util"),(0,i.kt)("h3",{id:"what-is-it-4"},"What is it?"),(0,i.kt)("p",null,"A utility building-block contains ",(0,i.kt)("strong",{parentName:"p"},"low level code")," used by many building-blocks. Often there is no framework-specific code and the building-block is simply a collection of types, utilities, pure functions, factories or composables."),(0,i.kt)("h3",{id:"naming-convention-4"},"Naming Convention"),(0,i.kt)("p",null,"Placed in folder ",(0,i.kt)("strong",{parentName:"p"},"util")),(0,i.kt)("h3",{id:"can-import-types-4"},"Can import types"),(0,i.kt)("p",null,"other util"),(0,i.kt)("h1",{id:"how-to-pick-the-correct-type-for-my-task"},"How to pick the correct type for my Task"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"To render this graph in VS-Code markdown preview install this extension: bierner.markdown-mermaid")),(0,i.kt)("mermaid",{value:"flowchart TD\n    A[Your Task] --\x3e B[Imagine the different requirements of the Task]\n    B --\x3e C{Do I need a new subpage}\n    C --\x3e|Yes| D(type: page)\n    C --\x3e|No| E{Do I need UI?}\n    E --\x3e |No| F{Do I need State?}\n    E --\x3e |Yes| G{Do I need State?}\n    F --\x3e|Yes| H(type: data)\n    F --\x3e|No| I(type: util)\n    G --\x3e|Yes| J(type: feature)\n    G --\x3e|No| K(type: ui)\n    H --\x3e L[Are all requirements of your task placed in a building-block?]\n    I --\x3e L\n    J --\x3e L\n    K --\x3e L\n    D --\x3e L\n    L --\x3e|Yes| M[Happy Coding!]\n    L --\x3e|No| O[You need an additional building-block]\n    O --\x3e B\n    M -.-> P[Evaluate your choices as a part of your review and refactor when neccessary]"}),(0,i.kt)("h1",{id:"matrix-of-allowed-imports"},"Matrix of allowed imports"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Allowed to Import ","\u2192"," ",(0,i.kt)("br",null)," It is ","\u2193"),(0,i.kt)("th",{parentName:"tr",align:null},"page"),(0,i.kt)("th",{parentName:"tr",align:null},"feature"),(0,i.kt)("th",{parentName:"tr",align:null},"data"),(0,i.kt)("th",{parentName:"tr",align:null},"ui"),(0,i.kt)("th",{parentName:"tr",align:null},"util"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"page"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"feature"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"data"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ui"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"util"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714")))))}d.isMDXComponent=!0}}]);