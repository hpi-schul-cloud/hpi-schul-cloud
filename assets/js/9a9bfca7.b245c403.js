"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[2341],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=o,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(g,a(a({ref:t},p),{},{components:r})):n.createElement(g,a({ref:t},p))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1040:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const i={},a="Defining Entities",l={unversionedId:"schulcloud-server/Coding-Guidelines/micro-orm",id:"schulcloud-server/Coding-Guidelines/micro-orm",title:"Defining Entities",description:"When defining entities with MikroORM (Version 5), the following should be considered:",source:"@site/docs/schulcloud-server/Coding-Guidelines/micro-orm.md",sourceDirName:"schulcloud-server/Coding-Guidelines",slug:"/schulcloud-server/Coding-Guidelines/micro-orm",permalink:"/docs/schulcloud-server/Coding-Guidelines/micro-orm",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/schulcloud-server/Coding-Guidelines/micro-orm.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/docs/schulcloud-server/Coding-Guidelines/logging"},next:{title:"Repositories",permalink:"/docs/schulcloud-server/Coding-Guidelines/repositories"}},c={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"defining-entities"},"Defining Entities"),(0,o.kt)("p",null,"When defining entities with MikroORM (Version 5), the following should be considered:\nThe property decorator requires explicit assignment of the type to the property and may not work correctly when working with type inference or assigning union types to a property. In these cases, the metadata may not be set correctly, which can lead to exceptions, for example, when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"em.assign()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"em.aggregate()")," functions."),(0,o.kt)("p",null,"Therefore, the following is ",(0,o.kt)("strong",{parentName:"p"},"not")," sufficient:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"},"  @Property()\n  termsAccepted = false;\n\n @Property()\n createdAt = new Date();\n\n")),(0,o.kt)("p",null,"The following works:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property()\n termsAccepted: boolean = false;\n\n @Property()\n createdAt: Date = new Date();\n\n")),(0,o.kt)("p",null,"The better way is to provide the type through the decorator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property({ type: 'boolean' })\n termsAccepted = false;\n\n @Property({ type: Date })\n createdAt = new Date();\n\n")),(0,o.kt)("p",null,"Errors can also occur when specifying multiple types (union types):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Poperty({ nullable: true })\n dueDate: Date | null;\n\n")),(0,o.kt)("p",null,"To set the metadata correctly, do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property({ type: Date, nullable: true })\n dueDate: Date | null;\n\n")),(0,o.kt)("p",null,"If type inference is not used, specifying the type through the property decorator is not necessary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"}," @Property()\n name: string;\n\n")))}d.isMDXComponent=!0}}]);