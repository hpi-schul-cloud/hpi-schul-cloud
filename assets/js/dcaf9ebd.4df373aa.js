"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[589],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=s,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4532:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const o={},a="API design",i={unversionedId:"schulcloud-server/Api",id:"schulcloud-server/Api",title:"API design",description:"nest.js",source:"@site/docs/schulcloud-server/Api.md",sourceDirName:"schulcloud-server",slug:"/schulcloud-server/Api",permalink:"/docs/schulcloud-server/Api",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/schulcloud-server/Api.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/schulcloud-server/Getting started"},next:{title:"How to update the docs",permalink:"/docs/category/how-to-update-the-docs"}},l={},p=[{value:"nest.js",id:"nestjs",level:2},{value:"Responses",id:"responses",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"api-design"},"API design"),(0,s.kt)("h2",{id:"nestjs"},"nest.js"),(0,s.kt)("p",null,"In nest.js all apis are defined in controllers.\nUsually the api follows the following syntax:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"/api/v3/<resource>\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Each controller is responsible for a specific resource. "),(0,s.kt)("li",{parentName:"ul"},"The controller is responsible for the routing and the validation of the request."),(0,s.kt)("li",{parentName:"ul"},"The controller calls a service to handle the request. "),(0,s.kt)("li",{parentName:"ul"},"The service is responsible for the business logic. "),(0,s.kt)("li",{parentName:"ul"},"The service calls a repository to access the database. "),(0,s.kt)("li",{parentName:"ul"},"The repository is responsible for the database access.")),(0,s.kt)("h2",{id:"responses"},"Responses"),(0,s.kt)("p",null,"When returning a response like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"    @ApiOperation({ summary: 'Create a new element on a card.' })\n    @ApiExtraModels(\n        ExternalToolElementResponse,\n        FileElementResponse,\n        LinkElementResponse,\n        RichTextElementResponse,\n        SubmissionContainerElementResponse\n    )\n    @ApiResponse({\n        status: 201,\n        schema: {\n            oneOf: [\n                { $ref: getSchemaPath(ExternalToolElementResponse) },\n                { $ref: getSchemaPath(FileElementResponse) },\n                { $ref: getSchemaPath(LinkElementResponse) },\n                { $ref: getSchemaPath(RichTextElementResponse) },\n                { $ref: getSchemaPath(SubmissionContainerElementResponse) },\n            ],\n        },\n    })\n    @ApiResponse({ status: 400, type: ApiValidationError })\n    @ApiResponse({ status: 403, type: ForbiddenException })\n    @ApiResponse({ status: 404, type: NotFoundException })\n    @Post(':cardId/elements')\n    async createElement(\n        @Param() urlParams: CardUrlParams,\n        @Body() bodyParams: CreateContentElementBodyParams,\n        @CurrentUser() currentUser: ICurrentUser\n    ): Promise<AnyContentElementResponse> {\n        const { type, toPosition } = bodyParams;\n        const element = await this.cardUc.createElement(currentUser.userId, urlParams.cardId, type, toPosition);\n        const response = ContentElementResponseFactory.mapToResponse(element);\n\n        return response;\n    }\n")),(0,s.kt)("p",null,"We want to use decorators to explain the intent of the response.",(0,s.kt)("br",{parentName:"p"}),"\n","The ",(0,s.kt)("inlineCode",{parentName:"p"},"@ApiOperation")," decorator is used to define the summary.",(0,s.kt)("br",{parentName:"p"}),"\n","The ",(0,s.kt)("inlineCode",{parentName:"p"},"@ApiResponse")," decorator is used to define the response.",(0,s.kt)("br",{parentName:"p"}),"\n","The ",(0,s.kt)("inlineCode",{parentName:"p"},"@ApiExtraModels")," decorator is used to define the response models.  "),(0,s.kt)("p",null,"The final response should either be an javascript Object or an array.\nWe do not return primitives like ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"boolean"),"."),(0,s.kt)("p",null,"Swagger will automatically generate the response schema from the response object."))}d.isMDXComponent=!0}}]);