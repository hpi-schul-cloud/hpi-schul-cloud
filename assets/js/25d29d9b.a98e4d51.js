"use strict";(self.webpackChunkdataport_docusaurus=self.webpackChunkdataport_docusaurus||[]).push([[3195],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},i="Controller",s={unversionedId:"schulcloud-server/Coding-Guidelines/controllers",id:"schulcloud-server/Coding-Guidelines/controllers",title:"Controller",description:"A modules api layer is defined within of controllers.",source:"@site/docs/schulcloud-server/Coding-Guidelines/controllers.md",sourceDirName:"schulcloud-server/Coding-Guidelines",slug:"/schulcloud-server/Coding-Guidelines/controllers",permalink:"/docs/schulcloud-server/Coding-Guidelines/controllers",draft:!1,editUrl:"https://github.com/hpi-schul-cloud/hpi-schul-cloud.github.io/blob/main/docs/schulcloud-server/Coding-Guidelines/controllers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Code Style",permalink:"/docs/schulcloud-server/Coding-Guidelines/code-style"},next:{title:"Deprecation Workflow",permalink:"/docs/schulcloud-server/Coding-Guidelines/deprection-workflow"}},l={},p=[{value:"JWT-Authentication",id:"jwt-authentication",level:2},{value:"Validation",id:"validation",level:2},{value:"DTOs",id:"dtos",level:2},{value:"DTO File naming",id:"dto-file-naming",level:3},{value:"openAPI specification",id:"openapi-specification",level:3},{value:"Mapping",id:"mapping",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controller"},"Controller"),(0,o.kt)("p",null,"A modules api layer is defined within of ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/controllers"},"controllers"),"."),(0,o.kt)("p",null,"The main responsibilities of a controller is to define the REST API interface as openAPI specification and map DTO's to match the logic layers interfaces."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-TypeScript"},"    @ApiOperation({ summary: 'some descriptive information that will show up in the API documentation' })\n    @ApiResponse({ status: 200, type: BoardResponse })\n    @ApiResponse({ status: 400, type: ApiValidationError })\n    @ApiResponse({ status: 403, type: ForbiddenException })\n    @ApiResponse({ status: 404, type: NotFoundException })\n    @Post()\n    async create(@CurrentUser() currentUser: ICurrentUser, @Body() params: CreateNewsParams): Promise<NewsResponse> {\n        const news = await this.newsUc.create(\n            currentUser.userId,\n            currentUser.schoolId,\n            NewsMapper.mapCreateNewsToDomain(params)\n        );\n        const dto = NewsMapper.mapToResponse(news);\n\n        return dto;\n    }\n")),(0,o.kt)("h2",{id:"jwt-authentication"},"JWT-Authentication"),(0,o.kt)("p",null,"For ",(0,o.kt)("strong",{parentName:"p"},"authentication"),", use ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/guards"},"guards")," like JwtAuthGuard. It can be applied to a whole controller or a single controller method only. Then, the authenticated user can be injected using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@CurrentUser()")," decorator."),(0,o.kt)("h2",{id:"validation"},"Validation"),(0,o.kt)("p",null,"Global settings of the core-module ensure ",(0,o.kt)("strong",{parentName:"p"},"request/response validation")," against the api definition. Simple input types might additionally use a custom ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/pipes"},"pipe")," while for complex types injected as query/body are validated by default when parsed as DTO class."),(0,o.kt)("h2",{id:"dtos"},"DTOs"),(0,o.kt)("p",null,"All data that leaves or enters the system has to be defined and typed using DTOs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class CreateNewsParams {\n    @IsString()\n    @SanitizeHtml()\n    @ApiProperty({\n        description: 'Title of the News entity',\n    })\n    title!: string;\n\n    // ...\n}\n")),(0,o.kt)("h3",{id:"dto-file-naming"},"DTO File naming"),(0,o.kt)("p",null,"Complex input DTOs are defined like ","[create-news]",".params.ts (class-name: CreateNewsParams)."),(0,o.kt)("p",null,"When DTO's are shared between multiple modules, locate them in the layer-related shared folder."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Security:")," When exporting data, internal entities must be mapped to a response DTO class named like ","[news]",".response.dto. The mapping ensures which data of internal entities are exported.")),(0,o.kt)("h3",{id:"openapi-specification"},"openAPI specification"),(0,o.kt)("p",null,"Defining the request/response DTOs in a controller will define the openAPI specification automatically. Additional ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/techniques/validation"},"validation rules")," and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/openapi/decorators"},"openAPI definitions")," can be added using decorators. For simplification, openAPI decorators should define a type and if a property is required, while additional decorators can be used from class-validator to validate content."),(0,o.kt)("h3",{id:"mapping"},"Mapping"),(0,o.kt)("p",null,"You should define a mapper to easily create dtos from the uc responses, and the datatypes expected by ucs from params."))}u.isMDXComponent=!0}}]);